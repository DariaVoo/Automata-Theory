
Stack: ['~', '<program>']
input: ['for', 'i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <program> -> ['<statement>']

Stack: ['~', '<statement>']
input: ['for', 'i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <statement> -> ['}', '<statement>', '{', '<for>']

Stack: ['~', '}', '<statement>', '{', '<for>']
input: ['for', 'i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <for> -> ['<expression>', 'downto', '<expression>', '=', '<identifier>', 'for']

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<identifier>', 'for']
input: ['for', 'i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
pop from stack for

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<identifier>']
input: ['i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <identifier> -> ['<character><id_end>']

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<character><id_end>']
input: ['i', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
get concat production <character><id_end>

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<id_end>', '<character>']
input: ['i', '~', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <character> -> ['i']

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<id_end>', 'i']
input: ['i', '~', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
pop from stack i

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '<id_end>']
input: ['~', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Use production <id_end> -> ['~']

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=', '~']
input: ['~', '=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
I found empty symbol ~
Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>', '=']
input: ['=', '2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
pop from stack =

Stack: ['~', '}', '<statement>', '{', '<expression>', 'downto', '<expression>']
input: ['2+1', 'to', '4', '{', 'print', '”', 'for', 'with', 'to', '”', ';', 'print', 'i', ';', 'print', '”', 'for', 'with', 'down', 'to', '”', ';', 'for', 'j', '=', '8', 'downto', '8-3', '{', 'print', 'j', ';', '}', '}', 'print', '12/6*12-2-(10+56)', ';', '~']
Error, table is empty!
Skip 2+1 from input str!
